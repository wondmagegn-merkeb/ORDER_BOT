<!DOCTYPE html>
<html lang="en" class="bg-gray-100 dark:bg-gray-900">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= title %> | Admin Panel</title>
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  
  <!-- AOS (Animation on Scroll) Library -->
  <link href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>

  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<body id="body" class="bg-gray-100 text-gray-900 font-sans tracking-normal transition-colors duration-300 dark:bg-gray-900 dark:text-gray-100" onload="AOS.init()">
  <div class="flex">
    <!-- Sidebar -->
    <div id="sidebar" class="fixed top-0 left-0 h-full w-64 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100 shadow-lg transform md:translate-x-0 -translate-x-full transition-transform duration-200 ease-in-out z-40">
      <%- include('../partials/sidebar') %>
    </div>

    <!-- Main Content -->
    <div class="flex-1 min-h-screen flex flex-col md:ml-64">

      <!-- Header -->
      <%- include('../partials/header') %>

      <!-- Main Section -->
      <main class="relative mt-16 p-6 flex-1 overflow-auto bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
        <%- include('../partials/notification') %>
        <%- include('../partials/deleteModal') %>
        <%- body %>

      </main>

      <!-- Footer -->
      <footer class="bg-white dark:bg-gray-800 text-center text-gray-500 dark:text-gray-400 text-sm border-t border-gray-200 dark:border-gray-700">
        <%- include('../partials/footer') %>
      </footer>

    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js" defer></script>
  <script src="https://cdn.jsdelivr.net/npm/eruda" defer></script>
  <script defer>eruda.init();</script>

  <!-- Sidebar and Theme Toggle -->
  <script defer>
    // Initialize AOS (for animations)
    AOS.init();

  // Live Clock and Date
  function updateDateTime() {
    const now = new Date();
    const time = now.toLocaleTimeString();
    const date = now.toLocaleDateString();
    document.getElementById('datetime').textContent = `${date} ${time}`;
  }
  setInterval(updateDateTime, 1000);
  updateDateTime();
const publicVapidKey = 'BJg88adt6DhKivTlbCjqnE2x09R9LXJiDyoY4WfFUuq1T46JWazbs0H6rZeq1HyGcGl0ff-NdUe9QRzKvlMuFpo';

async function subscribeUser() {
    if ('serviceWorker' in navigator && 'Notification' in window) {
        try {
            const register = await navigator.serviceWorker.register('/service-worker.js', {
                scope: '/',
            });

            console.log('Service Worker Registered');

            const subscription = await register.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array(publicVapidKey),
            });

            console.log('Push Subscription:', subscription);

            const response = await fetch('/subscribe', {
                method: 'POST',
                body: JSON.stringify(subscription),
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok) {
                throw new Error(`Server responded with status ${response.status}`);
            }

            const responseData = await response.json();
            console.log('Server response:', responseData);

            // Ask permission if not already granted
            if (Notification.permission !== 'granted') {
                await Notification.requestPermission();
            }

            alert(responseData.message || 'Subscription successful!');  // Use alert or UI instead of Notification here

        } catch (error) {
            console.error('Subscription failed:', error);
            alert(`Subscription failed: ${error.message}`);
        }
    } else {
        console.warn('Service workers or notifications are not supported in this browser.');
        alert('Service workers or notifications are not supported in this browser.');
    }
}

function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}

document.getElementById('notifyButton').addEventListener('click', () => {
    subscribeUser();
});



    const body = document.getElementById('body');
    const darkModeToggle = document.getElementById('darkModeToggle');
    const icon = darkModeToggle ? darkModeToggle.querySelector('i') : null;

    // Apply saved theme
    if (localStorage.getItem('theme') === 'dark') {
      document.documentElement.classList.add('dark');
      if (icon) {
        icon.classList.remove('fa-moon');
        icon.classList.add('fa-sun');
      }
    }

    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      sidebar.classList.toggle('translate-x-0');
      sidebar.classList.toggle('-translate-x-full');
    }

    function toggleDarkMode() {
      document.documentElement.classList.toggle('dark');
      if (icon) {
        icon.classList.toggle('fa-moon');
        icon.classList.toggle('fa-sun');
      }
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }
  </script>
</body>
</html>
