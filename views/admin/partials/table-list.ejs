<div class="container mx-auto px-4 py-4">
  <h1 class="text-3xl font-bold text-center mb-8 text-gray-800 flex justify-center items-center">
    <i class="fas fa-cogs mr-3 text-blue-600"></i>
    <%= modelName %> Management
  </h1>

  <!-- Search & Add -->
  <div class="flex flex-wrap justify-between items-center mb-6 gap-4">
    <div class="relative w-full max-w-md">
      <input type="text" id="searchInput" placeholder="Search"
        class="w-full p-2 pl-10 border border-gray-300 rounded">
      <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
    </div>
    <% if (permissions.canAdd) { %>
      <a href="/<%= modelNameLower %>/add" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition inline-flex items-center gap-2">
        <i class="fas fa-plus"></i> Add
      </a>
    <% } %>
  </div>

  <!-- Filters -->
  <% if (filters.length > 0) { %>
    <div class="mb-6 overflow-x-auto">
      <div class="flex space-x-2 w-max">
        <% filters.forEach(filter => { %>
          <button id="<%= filter.id %>FilterBtn"
                  class="filter-btn whitespace-nowrap px-4 py-2 rounded text-white <%= filter.colorClass %>"
                  data-filter="<%= filter.value.toLowerCase() %>">
            <%= filter.name %>
          </button>
        <% }); %>
      </div>
    </div>
  <% } %>

  <!-- Table -->
  <div class="overflow-x-auto">
    <table class="min-w-full bg-white border border-gray-300 rounded-md shadow-md">
      <thead>
        <tr>
          <% modelColumns.forEach(column => { %>
            <th class="p-3 border-b text-left capitalize"><%= column.name %></th>
          <% }); %>
          <th class="p-3 border-b text-left">Actions</th>
        </tr>
      </thead>
      <tbody id="tableBody">
        <% models.forEach(model => { %>
          <% const id = model[modelColumns[0].field]; %>
          <tr>
            <% modelColumns.forEach(column => { %>
              <td class="p-3 border-b"><%= model[column.field] ?? '' %></td>
            <% }); %>
            <td class="p-3 border-b flex space-x-2">
              <% if (permissions.canView) { %>
                <button class="view-btn bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded"
                        data-model='<%= JSON.stringify(model) %>'>
                  View
                </button>
              <% } %>

              <% if (permissions.canEdit) { %>
                <a href="/<%= modelNameLower %>/edit/<%= id %>" class="text-yellow-500 hover:text-yellow-600">
                  <i class="fas fa-edit"></i> Update
                </a>
              <% } %>

              <% if (permissions.canDelete) { %>
                <form method="POST" class="delete-form inline" data-id="<%= id %>" data-action="/<%= modelNameLower %>/delete">
                  <button type="button" class="open-delete-modal text-red-500 hover:text-red-600">
                    <i class="fas fa-trash-alt"></i> Delete
                  </button>
                </form>
              <% } %>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="mt-6 flex justify-center items-center space-x-2" id="paginationContainer"></div>
</div>

<!-- View Modal -->
<div id="viewModal" class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
  <div class="bg-white w-11/12 max-w-2xl p-6 rounded-lg shadow-lg relative overflow-y-auto max-h-[90vh]">
    <button id="closeViewModal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
    <div id="modalContent"></div>
  </div>
</div>

<!-- Script -->
<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.getElementById('searchInput');
  const tableBody = document.getElementById('tableBody');
  const paginationContainer = document.getElementById('paginationContainer');
  const rowsPerPage = 5;
  let currentPage = 1;

  function getVisibleRows() {
    return Array.from(tableBody.querySelectorAll('tr')).filter(row => row.style.display !== 'none');
  }

  function displayPage(page) {
    const visibleRows = getVisibleRows();
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    visibleRows.forEach((row, index) => {
      row.style.display = (index >= start && index < end) ? '' : 'none';
    });

    renderPagination(visibleRows.length);
  }

  function renderPagination(totalRows) {
    paginationContainer.innerHTML = '';
    const totalPages = Math.ceil(totalRows / rowsPerPage);

    function createBtn(html, disabled, onClick, active = false) {
      const btn = document.createElement('button');
      btn.innerHTML = html;
      btn.className = `px-3 py-1 rounded-md text-sm border ${
        disabled ? 'bg-gray-300 cursor-not-allowed' : 
        active ? 'bg-blue-500 text-white border-blue-500' : 
        'bg-white text-gray-700 border-gray-300 hover:bg-blue-100'
      }`;
      btn.disabled = disabled;
      if (!disabled) btn.addEventListener('click', onClick);
      return btn;
    }

    if (totalPages > 1) {
      paginationContainer.appendChild(createBtn('&laquo;', currentPage === 1, () => { currentPage = 1; displayPage(currentPage); }));
      paginationContainer.appendChild(createBtn('&lsaquo;', currentPage === 1, () => { currentPage--; displayPage(currentPage); }));

      for (let i = 1; i <= totalPages; i++) {
        paginationContainer.appendChild(createBtn(i, false, () => { currentPage = i; displayPage(currentPage); }, i === currentPage));
      }

      paginationContainer.appendChild(createBtn('&rsaquo;', currentPage === totalPages, () => { currentPage++; displayPage(currentPage); }));
      paginationContainer.appendChild(createBtn('&raquo;', currentPage === totalPages, () => { currentPage = totalPages; displayPage(currentPage); }));
    }
  }

  // Search
  searchInput.addEventListener('input', function () {
    const query = this.value.toLowerCase();
    const allRows = tableBody.querySelectorAll('tr');

    allRows.forEach(row => {
      const match = Array.from(row.cells).some(cell => 
        cell.textContent.toLowerCase().includes(query)
      );
      row.style.display = match ? '' : 'none';
    });

    currentPage = 1;
    displayPage(currentPage);
  });

  // View Modal
  const viewModal = document.getElementById('viewModal');
  const modalContent = document.getElementById('modalContent');
  const closeViewModal = document.getElementById('closeViewModal');

  document.querySelectorAll('.view-btn').forEach(button => {
    button.addEventListener('click', function () {
      const modelData = JSON.parse(this.dataset.model);
      const modelName = "<%= modelName %>";
      modalContent.innerHTML = "";

      for (const [key, value] of Object.entries(modelData)) {
        if (key !== 'image' && key !== 'latitude' && key !== 'longitude' && key !== 'oldData' && key !== 'newData' ) {
          modalContent.innerHTML += `
            <p class="mb-2"><strong class="capitalize">${key}:</strong> ${value ?? ''}</p>
          `;
        }
      }

        // Display oldData if exists
        if (modelData.oldData) {
          modalContent.innerHTML += `<h2 class="font-bold text-lg mt-6">Old Data:</h2>`;
          for (const [key, value] of Object.entries(modelData.oldData)) {
            modalContent.innerHTML += `
              <p class="mb-1 ml-4"><strong class="capitalize">${key}:</strong> ${value ?? ''}</p>
            `;
          }
        }

        // Display newData if exists
        if (modelData.newData) {
          modalContent.innerHTML += `<h2 class="font-bold text-lg mt-6">New Data:</h2>`;
          for (const [key, value] of Object.entries(modelData.newData)) {
            modalContent.innerHTML += `
              <p class="mb-1 ml-4"><strong class="capitalize">${key}:</strong> ${value ?? ''}</p>
            `;
          }
        }
      if (modelName === "Order") {
        if (modelData.image) {
          modalContent.innerHTML += `
            <div class="my-4">
              <p class="font-semibold mb-2">Image:</p>
              <img src="${modelData.image}" alt="Order Image" class="w-full max-h-60 object-cover rounded-md border" />
            </div>
          `;
        }

        if (modelData.latitude && modelData.longitude) {
          const mapSrc = `https://www.google.com/maps?q=${modelData.latitude},${modelData.longitude}&hl=es;z=14&output=embed`;
          modalContent.innerHTML += `
            <div class="my-4">
              <p class="font-semibold mb-2">Location Map:</p>
              <div class="w-full h-64">
                <iframe src="${mapSrc}" width="100%" height="100%" class="rounded-md border" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
              </div>
            </div>
          `;
        }
      }

      viewModal.classList.remove('hidden');
    });
  });

  closeViewModal.addEventListener('click', () => {
    viewModal.classList.add('hidden');
  });

  // Filters
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', function () {
      document.querySelectorAll('.filter-btn').forEach(b => {
        b.classList.remove('ring-2', 'ring-offset-2', 'ring-blue-500');
      });
      this.classList.add('ring-2', 'ring-offset-2', 'ring-blue-500');

      const value = this.dataset.filter;
      const allRows = tableBody.querySelectorAll('tr');

      allRows.forEach(row => {
        const match = Array.from(row.cells).some(cell => 
          cell.textContent.toLowerCase().includes(value)
        );
        row.style.display = match ? '' : 'none';
      });

      currentPage = 1;
      displayPage(currentPage);
    });
  });

  // Initial
  displayPage(currentPage);
});
</script>
