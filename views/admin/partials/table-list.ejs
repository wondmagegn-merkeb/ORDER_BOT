<div class="container mx-auto px-4 py-4">
  <h1 class="text-3xl font-bold text-center mb-8 text-gray-800 flex justify-center items-center">
    <i class="fas fa-cogs mr-3 text-blue-600"></i>
    <%= modelName %> Management
  </h1>

  <!-- Search & Add -->
  <div class="flex justify-between items-center mb-6">
    <div class="relative w-full max-w-md">
      <input type="text" id="searchInput" placeholder="Search"
        class="w-full p-2 pl-10 border border-gray-300 rounded">
      <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
    </div>
    <% if (permissions.canAdd) { %>
    <a href="/<%= modelNameLower %>/add" class="ml-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition inline-flex items-center gap-2">
      <i class="fas fa-plus"></i> Add
    </a>
    <% } %>
  </div>

  <!-- Filters -->
  <div class="mb-6 overflow-x-auto">
    <div class="flex space-x-2 w-max">
      <% filters.forEach(filter => { %>
        <button id="<%= filter.id %>FilterBtn" 
                class="filter-btn whitespace-nowrap px-4 py-2 rounded text-white <%= filter.colorClass %>" 
                data-filter="<%= filter.value.toLowerCase() %>">
          <%= filter.name %>
        </button>
      <% }); %>
    </div>
  </div>

  <!-- Table -->
  <div class="relative overflow-x-auto">
    <table class="min-w-full bg-white border border-gray-300 rounded-md shadow-md">
      <thead>
        <tr>
          <% modelColumns.forEach(column => { %>
            <th class="p-3 border-b text-left"><%= column.name %></th>
          <% }); %>
          <th class="p-3 border-b text-left">Actions</th>
        </tr>
      </thead>
      <tbody id="tableBody">
        <% models.forEach(model => { %>
          <% const id = model[modelColumns[0].field]; %>
          <tr>
            <% modelColumns.forEach(column => { %>
              <td class="p-3 border-b"><%= model[column.field] %></td>
            <% }); %>
            <td class="p-3 border-b flex space-x-2">
              <% if (permissions.canView) { %>
              <button 
    class="view-btn text-blue-500 hover:text-blue-600" 
    data-model='<%= JSON.stringify(model) %>'>
    <i class="fas fa-eye"></i> View
  </button>
              <% } %>

              <% if (permissions.canEdit) { %>
              <a href="/<%= modelNameLower %>/edit/<%= id %>" class="text-yellow-500 hover:text-yellow-600">
                <i class="fas fa-edit"></i> Update
              </a>
              <% } %>

              <% if (permissions.canDelete) { %>
              <form method="POST" class="delete-form inline" data-id="<%= id %>" data-action="/api/<%= modelNameLower %>/delete">
                <button type="button" class="open-delete-modal text-red-500 hover:text-red-600">
                  <i class="fas fa-trash-alt"></i> Delete
                </button>
              </form>
              <% } %>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>

    <!-- No Results Message -->
    <div id="noResults" class="hidden text-center text-gray-500 py-6">No results found.</div>
  </div>

  <!-- Pagination -->
  <div class="mt-6 flex justify-center items-center space-x-2" id="paginationContainer"></div>
</div>

<!-- View Modal -->
<div id="viewModal" class="hidden absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
  <div class="bg-white w-11/12 max-w-2xl p-6 rounded-lg shadow-lg relative overflow-y-auto max-h-[70vh]">
    <!-- Close Button -->
    <button 
      id="closeViewModal" 
      class="absolute top-4 right-4 text-red-500 hover:text-red-700 text-3xl font-bold">
      &times;
    </button>
    <h2 class="text-2xl font-bold mb-4 text-center text-gray-800">Order Details</h2>
    <!-- Scrollable Content -->
    <div id="modalContent" class="flex-1 max-h-72 overflow-y-auto overflow-x-hidden space-y-6 pr-2">
  <!-- Dynamic content will go here -->
</div>

  </div>
</div>


<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.getElementById('searchInput');
  const tableBody = document.getElementById('tableBody');
  const paginationContainer = document.getElementById('paginationContainer');
  const noResults = document.getElementById('noResults');
  const rowsPerPage = 5;
  let currentPage = 1;

  let allVisibleRows = tableBody.querySelectorAll('tr');
console.log(allVisibleRows);
  function displayPage(page) {
    
    const start = (page - 1) * rowsPerPage;
    const end = start + rowsPerPage;
console.log(allVisibleRows);
    allVisibleRows.forEach((row, index) => {
      row.style.display = (index >= start && index < end) ? '' : 'none';
    });
console.log(allVisibleRows)
    renderPagination(allVisibleRows.length);
    noResults.classList.toggle('hidden', allVisibleRows.length > 0);
  }

  function renderPagination(totalRows) {
    paginationContainer.innerHTML = '';
    const totalPages = Math.ceil(totalRows / rowsPerPage);

    function createBtn(html, disabled, onClick, active = false) {
      const btn = document.createElement('button');
      btn.innerHTML = html;
      btn.className = `px-4 py-2 rounded-md text-sm border transition ${disabled ? 'bg-gray-300 cursor-not-allowed' : active ? 'bg-blue-500 text-white font-bold border-blue-500' : 'bg-white text-gray-700 border-gray-300 hover:bg-blue-100'}`;
      btn.disabled = disabled;
      if (!disabled) btn.addEventListener('click', onClick);
      return btn;
    }

    if (totalPages > 0) {
      paginationContainer.appendChild(createBtn('&laquo;', currentPage === 1, () => { currentPage = 1; displayPage(currentPage); }));
      paginationContainer.appendChild(createBtn('&lsaquo;', currentPage === 1, () => { currentPage--; displayPage(currentPage); }));

      for (let i = 1; i <= totalPages; i++) {
        paginationContainer.appendChild(createBtn(i, false, () => { currentPage = i; displayPage(currentPage); }, i === currentPage));
      }

      paginationContainer.appendChild(createBtn('&rsaquo;', currentPage === totalPages, () => { currentPage++; displayPage(currentPage); }));
      paginationContainer.appendChild(createBtn('&raquo;', currentPage === totalPages, () => { currentPage = totalPages; displayPage(currentPage); }));
    }
  }

  searchInput.addEventListener('input', function () {
     const query = this.value.toLowerCase();
     allVisibleRows = tableBody.querySelectorAll('tr');
console.log(allVisibleRows)
    allVisibleRows.forEach(row => {
      const match = Array.from(row.cells).some(cell =>
        cell.textContent.toLowerCase().includes(query)
      );
      row.style.display = match ? '' : 'none';
    });
    currentPage = 1;
    displayPage(currentPage);
  });
console.log(allVisibleRows)
  const viewModal = document.getElementById('viewModal');
  const modalContent = document.getElementById('modalContent');
  const closeViewModal = document.getElementById('closeViewModal');

  document.querySelectorAll('.view-btn').forEach(button => {
  button.addEventListener('click', function () {
    const modelData = JSON.parse(this.dataset.model);
    const modelName = "<%= modelName %>";

    let modalHTML = `
      <div class="bg-gray-50 p-4 rounded-lg shadow-md space-y-2">
        <h3 class="text-xl font-semibold text-gray-800 mb-3">Order Summary</h3>
        <div class="grid grid-cols-2 gap-4 text-gray-700">
    `;

    for (const [key, value] of Object.entries(modelData)) {
      if (key !== 'image' && key !== 'latitude' && key !== 'longitude' && key !== 'oldData' && key !== 'newData') {
        modalHTML += `
          <div>
            <span class="font-semibold text-gray-900">${key}:</span> 
            <span class="text-blue-600">${value ?? ''}</span>
          </div>
        `;
      }
    }

    modalHTML += `
        </div>
      </div>
    `;

    if (modelData.oldData) {
      modalHTML += `
        <div class="mt-4">
          <h3 class="text-xl font-bold text-gray-700">Old Data (JSON)</h3>
          <pre class="bg-gray-100 p-4 rounded-lg text-sm font-mono text-gray-800 whitespace-pre-wrap">
${JSON.stringify(modelData.oldData, null, 2)}
          </pre>
        </div>
      `;
    }

    if (modelData.newData) {
      modalHTML += `
        <div class="mt-4">
          <h3 class="text-xl font-bold text-gray-700">New Data (JSON)</h3>
          <pre class="bg-gray-100 p-4 rounded-lg text-sm font-mono text-gray-800 whitespace-pre-wrap">
${JSON.stringify(modelData.newData, null, 2)}
          </pre>
        </div>
      `;
    }

    if (modelName === "Order") {
      if (modelData.image) {
        modalHTML += `
          <div class="mt-4">
            <h2 class="text-xl font-bold mb-2 text-gray-700">Image</h2>
            <img src="${modelData.image}" alt="Order Image" class="w-full max-h-60 object-cover rounded-md border" />
          </div>
        `;
      }

      if (modelData.latitude && modelData.longitude) {
        const mapSrc = `https://www.google.com/maps?q=${modelData.latitude},${modelData.longitude}&hl=es;z=14&output=embed`;
        modalHTML += `
          <div class="bg-gray-50 p-4 rounded-lg shadow-md space-y-4 mt-6">
            <h3 class="text-xl font-semibold text-gray-800 mb-3">Delivery Location</h3>
            <div class="w-full h-64 overflow-hidden rounded-lg border border-gray-300 shadow-sm">
              <iframe src="${mapSrc}" width="100%" height="100%" class="rounded-md border" allowfullscreen loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
            </div>
          </div>
        `;
      }
    }

    modalContent.innerHTML = modalHTML;
    viewModal.classList.remove('hidden');
  });
});

  closeViewModal.addEventListener('click', () => {
    viewModal.classList.add('hidden');
  });

  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', function () {
      document.querySelectorAll('.filter-btn').forEach(b => {
        b.classList.remove('ring-2', 'ring-offset-2', 'ring-blue-500');
      });

      this.classList.add('ring-2', 'ring-offset-2', 'ring-blue-500');

      const value = this.dataset.filter;
      allVisibleRows = tableBody.querySelectorAll('tr');
      allVisibleRows.forEach(row => {
        const match = Array.from(row.cells).some(cell =>
          cell.textContent.toLowerCase().includes(value)
        );
        row.style.display = match ? '' : 'none';
      });
console.log(allVisibleRows)
      currentPage = 1;
      displayPage(currentPage);
    });
  });

  displayPage(currentPage);
});
</script>
